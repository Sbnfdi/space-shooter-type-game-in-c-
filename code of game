#include <iostream>
#include <conio.h>
using namespace std;
#include <vector>
#include<stdlib.h>
#include<windows.h>


string name;

bool gameEnded;

const int width = 25;
const int height = 25;
char frame_size [width][height];
char fo[4]={'A','M','P','O'};
enum eDirection{ STOP = 0, LEFT,RIGHT,FIRE};
eDirection dir;
class playingframe;
int score=0,lives=3;
void gotoxy(int x,int y)
{
	COORD coord;
	coord.X=x;
	coord.Y=y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),coord);
}

void frame()
{
	const int width=25;
	const int height=70;
	for(int i=0;i<height+2;i++)
	{
		gotoxy(i,0);
		cout<<"=";
	}
	for(int i=0;i<width+2;i++)
	{
		gotoxy(height+2,i);
		cout<<"||";
	}
	for(int i=0;i<height+2;i++)
	{
		gotoxy(i,width+2);
		cout<<"=";
	}
	for(int i=0;i<width+2;i++)
	{
		gotoxy(0,i);
		cout<<"||";
	}
}

void loading_screen(){
    int row,col,r,c,q;
    
	gotoxy(22,10);
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    
    SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_INTENSITY);
    cout<<("Loading the Assets please wait...");
        SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_INTENSITY);

    gotoxy(22,11);
    for(r=1;r<=30;r++)
	{
		Sleep(400);			
		cout<<("|");
	}
    _getch();
}

class enemy
{
	public:
		int difficulity=2,high=2;;     
		vector<int> enemyX,enemyY;
		enemy(){}
		enemy(int y)
		{
			enemyX.push_back(10); 
			enemyX.push_back(15);
			enemyY.push_back(0);
			enemyY.push_back(0);
		}
		void increase()
		{
			high++;
			difficulity=high;
			if(high<4)
				for(int i=0;i<high;i++)
				{
					int Y=0;
					int X=rand()%height;
					enemyX.push_back(X);
					enemyY.push_back(Y);
				}
		}
	friend class fighter_plane;
};

class fighter_plane{
	public:
		int x,nBu;
		fighter_plane(){}
		fighter_plane(int y)
		{
			x=10;
			dir=STOP;
		}
		void input()
		{
			if(_kbhit())
			{
				switch(_getch())
				{
					case 'A':
					case 'a':
						dir=LEFT;
						break;
					case 'D':
					case 'd':
						dir=RIGHT;
						break;
					case 'O':
					case 'o':
						shoot();
						break;
					case 'P':
					case 'p':
						gameEnded=true;
						break; 
				}
			}
		}
		void shoot()
		{
			int v=18;
			frame_size[v][x]='|';
		}
		void movement(enemy &e)
		{
			for(int i=0;i<e.enemyY.size();i++)
			{
				e.enemyY[i]++;
				if(e.enemyY[i]>22)
					gameEnded=true;
			}
			switch(dir)
			{
				case LEFT:
					if(x>0)
					x--;
					break;
				case RIGHT:
					if(x<width-1)
					x++;
					break;
			
				case FIRE:
					shoot();
					break;
				default:
					break; 
			}
			dir=STOP;
		}
		friend class enemy;
};

class playingframe{
	public:
		playingframe()
		{
			gameEnded=false;
			score=0;
		}
		void Draw(fighter_plane f1,enemy &e1)
		{
			vector<int>::iterator it;
			system("CLS");				
			for(int i=0;i<width;i++)
			{
				for(int j=0;j<height;j++)
				{
					if(frame_size[i][j]!='|')
					frame_size[i][j]=' ';
				}	
			}	
			for(int i=0;i<width;i++)
			{
				for(int j=0;j<height;j++)
			 	{
			 		for(int k=0;k<e1.enemyX.size();k++)
			 		if(e1.enemyX[k]==j && e1.enemyY[k]==i)
						frame_size[i][j]='e';
			 		
					for(int k=0;k<e1.enemyX.size();k++)
			 		{
						if(frame_size[e1.enemyY[k]][e1.enemyX[k]]=='|' )
						{
							score+=10;
							frame_size[i][j]=' ';
							it=e1.enemyY.begin()+k;
							e1.enemyY.erase(e1.enemyY.begin()+k);
							it=e1.enemyX.begin()+k;
							e1.enemyX.erase(e1.enemyX.begin()+k);
							e1.difficulity--;
							if(e1.difficulity==0)
							e1.increase();
						}
					}
			 		if(j==f1.x)
						frame_size[19][j]='e';
			 		if(frame_size[i][j]=='|')
			 		{
			 			frame_size[i-1][j]='|';
			 			frame_size[i][j]=' ';
					}
				 }
			}
			for(int i=0;i<width;i++)
			 	cout<<"=";
			cout<<endl;
			for(int i=0;i<width;i++)
			{
				for(int j=0;j<height;j++)
				{
					if(j==0 && i==0)
						cout<<"||";
					else if(j==0 && i!=0)
						cout<<"||";
					cout<<frame_size[i][j];
					if(j==width-1)
						cout<<"||";
				}
				cout<<endl;	
			}		
			for(int i=0;i<height+2;i++)
				cout<<"=";
				/*if (playerX == enemyX && playerY == enemyY) {
        lives--;
    }

    // Display lives
    std::cout << "Lives: " << lives << std::endl;

    // Check if all lives are lost
    if (lives <= 0) {
        gameOver = true;
        std::cout << "Game over. You lost all your lives." << std::endl;
    }*/
    

			cout<<endl<<"Name :"<<name<<" Score :"<<score<<endl;
		}
		friend class enemy;
};

int main() {
	int diff;
	char c;
	frame();
	
		gotoxy(22,6);
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

		SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
		cout<<"_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_";

	gotoxy(25,8);
	cout<<"made by abdullah zahid\n";
		gotoxy(25,10);

	cout<<"A Dark fight\n";
	gotoxy(25,14);
	cout<<"Name : ";
	cin>>name;
	
	           gotoxy(22,16);
	cout<<"Difficutity(L/M/H) :";
	cin>>c;
	
	
	switch(c)
	{
		case 'L':
		case 'l':
			diff=125;
			break;
		case 'M':
		case 'm':
			diff=115;
			break;
		case 'H':
		case 'h':
			diff=100;
			break;
		default:
			diff=125;
	}
	system("CLS");
	frame();
	  gotoxy(18,3);

	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    
    SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_INTENSITY);
	cout<<"INSTRUCTION FOR PLAYING THIS GAME ARE";
	          cout<<endl;
			gotoxy(22,6);
			cout<<"A for moving the jet left";
		            cout<<endl;
              gotoxy(22,7);
			  cout<<"D for moving the jet right";
			        cout<<endl;
				gotoxy(22,8);
				cout<<"O for firing"<<endl;
				gotoxy(22,9);
                     cout<<"for pausing the game press P";	
                 gotoxy(22,15);

				 cout<<"PRESS S TO CONTINUE PRESS P TO EXIT"<<endl;

			if(_kbhit()=='S' ||_kbhit()=='s' )
			{
              goto start;
			}
			else if(_getch()=='p' || _getch()=='P' )
			{
				gameEnded=true;
			}
			else
			{
				cout<<"invalid entry";
			}

	start:
		gotoxy(10,15);
HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

		SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
		cout<<"Chalo shuru kartein hain press any key to show your ready";
		_getch();
		
		system("CLS");
	frame();

	loading_screen();
	playingframe b;		
	enemy e(0);
	fighter_plane f(0);
	while(!gameEnded)
	{
		
		
		b.Draw(f,e);
		f.input();
		f.movement(e);
		

		if(score>=20)
		{
			cout<<"level 2";
			diff=45;
		}
		if(score>=40)
		{
			diff =10;
		
		
		Sleep(diff);
		
		cout<<"level 5";
		}
	}
	cout<<endl;
	cout<<"Do you want to play again ? (Y/N)";
	cin>>c;
	if(c=='Y' || c=='y')
	{
		system("CLS");
		goto start;
	}
	return 0;
}
